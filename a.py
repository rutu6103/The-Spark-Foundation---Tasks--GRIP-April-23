# -*- coding: utf-8 -*-
"""a.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UWBnNTm4zCS9G2TYqpmRs6QEazla0I4J

TASK 1 : PREDICTION USING SUPERVISED ML

Predict the percentage of a student based on no. of study hours

Presentor : Rutuja Kadam

Importing libraries
"""

#import libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error

"""Reading the data"""

Url = "http://bit.ly/w-data"
data = pd.read_csv(Url)
data.head()

data.tail()

data.info()

data.shape

data.describe()

data.isnull().sum()

data.duplicated().sum()

data.plot(x = "Hours", y = "Scores", style = "o")
plt.title("HOURS V/S PERCENTAGE")
plt.xlabel("Hours studied")
plt.ylabel("Percentage scored")
plt.show()

"""Predict Outcomme Using Supervised Machine Learning"""

x = data.iloc[:, :-1].values
y = data.iloc[:, 1].values

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 0)

reg = LinearRegression()
reg.fit(x_train, y_train)

print("Successfully trained")

x_pred = reg.predict(x_train)

"""Plotting Regression plot of Training Model"""

plt.scatter(x_train, y_train, color = "blue")
plt.plot(x_train, x_pred, c="r")
plt.title("Hours V/S Percentage\n Training Model")
plt.xlabel("Hours studied")
plt.ylabel("Percentage Scored")
plt.show()

line = reg.coef_*x + reg.intercept_

plt.scatter(x, y)
plt.plot(x, line)
plt.title("Hours V/S Percentage\n Training Model")
plt.xlabel("Hours studied")
plt.ylabel("Percentage Scored")
plt.show()

"""Predicting Scores and absolute error between the actual score and predicted score"""

print(x_test)                     #Test data : in hours
y_pred = reg.predict(x_test)      #Predicting scores on the basis of test data

#Comparing Actual vs Predicted
df = pd.DataFrame({"Actual": y_test, "Predicted": y_pred})
df

from sklearn import metrics
print("Mean absolute error", metrics.mean_absolute_error(y_test, y_pred))